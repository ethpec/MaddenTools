import pandas as pd
import random

file_path = 'Files/Madden24/IE/Test/PotentialInput2.xlsx'

df = pd.read_excel(file_path)

# Create the missing columns SkillPoints0, SkillPoints1, SkillPoints2, SkillPointsRookieRoll if they don't exist
for col_name in ['SkillPointsRookieRoll', 'SkillPoints0', 'SkillPoints1', 'SkillPoints2']:
    if col_name not in df.columns:
        df[col_name] = 0  # Initialize the column with zeros

# Fill NaN values in the 'SkillPointsRookieRoll' column with 0
df['SkillPointsRookieRoll'] = df['SkillPointsRookieRoll'].fillna(0)

# Define a function to calculate DevTraitChange
def calculate_dev_trait_change(row):
    last_season = row['DevTraitLastSeason']
    current = row['TraitDevelopment']
    mapping = {
        ('Normal', 'Star'): 'NtoS',
        ('Normal', 'Superstar'): 'NtoSS',
        ('Normal', 'XFactor'): 'NtoXF',
        ('Star', 'Normal'): 'StoN',
        ('Star', 'Superstar'): 'StoSS',
        ('Star', 'XFactor'): 'StoXF',
        ('Superstar', 'Normal'): 'SStoN',
        ('Superstar', 'Star'): 'SStoS',
        ('Superstar', 'XFactor'): 'SStoXF',
        ('XFactor', 'Normal'): 'XFtoN',
        ('XFactor', 'Star'): 'XFtoS',
        ('XFactor', 'Superstar'): 'XFtoSS',
    }
    return mapping.get((last_season, current), '')

# Apply the function to the DataFrame
df['DevTraitChange'] = df.apply(calculate_dev_trait_change, axis=1)

def calculate_total_skill_points(row):
    # Calculate TotalSkillPoints by summing SkillPoints0 to SkillPoints2 and SkillPointsRookieRoll
    total_skill_points = row[['SkillPoints0', 'SkillPoints1', 'SkillPoints2', 'SkillPointsRookieRoll']].sum()
    return total_skill_points

def calculate_age_based_skill_points(row):
    if row['YearsPro'] != 0:
        return row  # Skip processing for players who are not rookies
    if (
        row['YearsPro'] == 0 and row['ContractStatus'] in ['Signed', 'FreeAgent', 'PracticeSquad']
        and row['Age'] in [20, 21, 22, 23, 24, 25]
        and row['Position'] not in ['QB', 'K', 'P']
    ):
        for i in range(row['YearsPro'], 3):  # Calculate for YearsPro and beyond
            skill_points_key = f'SkillPoints{i}'  # Generate the key based on YearsPro
            development_trait = row['TraitDevelopment']
            if development_trait == 'Normal':
                chances = [0, 1, 2, 3, 4, 5, 6, 8, 10]
                probabilities = [0.00, 0.70, 0.20, 0.05, 0.025, 0.01, 0.01, 0.005, 0.00]  # Avg = 1.5 #
            elif development_trait == 'Star':
                chances = [0, 1, 2, 3, 4, 5, 6, 8, 10]
                probabilities = [0.00, 0.10, 0.20, 0.45, 0.15, 0.05, 0.03, 0.015, 0.005]  # Avg ~ 3 #
            elif development_trait in ['Superstar', 'XFactor']:
                chances = [0, 1, 2, 3, 4, 5, 6, 8, 10]
                probabilities = [0.00, 0.00, 0.00, 0.20, 0.54, 0.15, 0.08, 0.02, 0.01]  # Avg = 4.25 #
            skill_points = random.choices(chances, probabilities)[0]
            row[skill_points_key] += skill_points  # Add skill points to the corresponding SkillPointsX value
    return row

def calculate_rookie_skill_points(row):
    if row['YearsPro'] != 0:
        return row['SkillPointsRookieRoll']  # Skip processing for players who are not rookies
    if row['YearsPro'] == 0 and row['ContractStatus'] in ['Signed', 'FreeAgent', 'PracticeSquad']:
        development_trait = row['TraitDevelopment']
        if development_trait == 'Normal':
            chances = [0, 1, 2, 3, 4, 5, 6, 8, 10]
            probabilities = [0.20, 0.41, 0.20, 0.12, 0.04, 0.017, 0.008, 0.004, 0.001]  # Average = 1.5 #
        elif development_trait == 'Star':
            chances = [0, 1, 2, 3, 4, 5, 6, 8, 10]
            probabilities = [0.00, 0.125, 0.45, 0.125, 0.125, 0.075, 0.05, 0.035, 0.015]  # Average = 3 #
        elif development_trait in ['Superstar', 'XFactor']:
            chances = [0, 1, 2, 3, 4, 5, 6, 8, 10]
            probabilities = [0.00, 0.00, 0.00, 0.40, 0.25, 0.125, 0.10, 0.075, 0.05]  # Average = 4.5 #
        skill_points = random.choices(chances, probabilities)[0]
        return skill_points
    return row['SkillPointsRookieRoll']  # Keep the existing skill points if conditions are not met.

def calculate_skill_points_rookieroll(row):
    if row['YearsPro'] == 0:  # Only process players who are rookies (YearsPro == 0)
        skill_points_rookie_roll = row['SkillPointsRookieRoll']
        skill_points_columns = ['SkillPoints0', 'SkillPoints1', 'SkillPoints2']

        for col in skill_points_columns:
            skill_points = row[col]
            chance = random.random()
            if chance < 0.30:  # 30% chance to take out 0%
                pass
            elif 0.30 <= chance < 0.60:  # 30% chance to take out 25%
                amount_taken = min(skill_points, int(skill_points_rookie_roll * 0.25))  # Take minimum of the two values
                skill_points -= amount_taken  # Subtract the amount taken from the current column
                skill_points_rookie_roll += amount_taken  # Add the amount taken to SkillPointsRookieRoll
            elif 0.60 <= chance < 0.90:  # 30% chance to take out 50%
                amount_taken = min(skill_points, int(skill_points_rookie_roll * 0.5))  # Take minimum of the two values
                skill_points -= amount_taken  # Subtract the amount taken from the current column
                skill_points_rookie_roll += amount_taken  # Add the amount taken to SkillPointsRookieRoll
            else:  # 10% chance to take out 75%
                amount_taken = min(skill_points, int(skill_points_rookie_roll * 0.75))  # Take minimum of the two values
                skill_points -= amount_taken  # Subtract the amount taken from the current column
                skill_points_rookie_roll += amount_taken  # Add the amount taken to SkillPointsRookieRoll

            # Ensure the values in the skill points columns are never less than 0
            row[col] = max(skill_points, 0)

        # Update the SkillPointsRookieRoll in the row
        row['SkillPointsRookieRoll'] = skill_points_rookie_roll

    return row['SkillPointsRookieRoll'] if row['YearsPro'] == 0 else row['SkillPoints_Rookie']  # Keep the existing skill points if YearsPro != 0

# Apply the functions to the DataFrame
df = df.apply(calculate_age_based_skill_points, axis=1)
df['SkillPointsRookieRoll'] = df.apply(calculate_rookie_skill_points, axis=1)
df['TotalSkillPoints'] = df.apply(calculate_total_skill_points, axis=1)

# Calculate SkillPoints_Rookie by summing SkillPointsRookieRoll and random amounts from SkillPoints0 to SkillPoints2
df['SkillPoints_Rookie'] = df.apply(calculate_skill_points_rookieroll, axis=1)

def calculate_remaining_skill_points(row):
    if row['YearsPro'] != 0:
        return row  # Skip processing for players who are not rookies
    if row['YearsPro'] == 0:
        # Calculate RemainingSkillPoints by subtracting SkillPointsRookieRoll from TotalSkillPoints
        row['RemainingSkillPoints'] = row['TotalSkillPoints'] - row['SkillPoints_Rookie']
    return row

def distribute_remaining_skill_points(row):
    if row['YearsPro'] != 0:
        return row  # Skip processing for players who are not rookies
    if row['YearsPro'] == 0:
        remaining_points = row['RemainingSkillPoints']
        new_skill_points = [0, 0, 0]

        while True:
            total_new_skill_points = sum(new_skill_points)

            # Ensure the sum of NewSkillPoints0 through NewSkillPoints2 equals RemainingSkillPoints
            if total_new_skill_points == remaining_points and all(x >= 0 for x in new_skill_points):
                break

            new_skill_points = [random.randint(0, remaining_points) for _ in range(3)]
            if sum(new_skill_points) > remaining_points:
                # Randomly pick one of the new_skill_points to adjust
                adjust_index = random.choice([0, 1, 2])
                new_skill_points[adjust_index] -= sum(new_skill_points) - remaining_points

        # Assign the new skill points to the respective columns
        row['NewSkillPoints0'], row['NewSkillPoints1'], row['NewSkillPoints2'] = new_skill_points

    return row

df = df.apply(calculate_remaining_skill_points, axis=1)
df = df.apply(distribute_remaining_skill_points, axis=1)

# Save the modified DataFrame to Excel
df.to_excel('Files/Madden24/IE/Test/Player_Potential2.xlsx', index=False)